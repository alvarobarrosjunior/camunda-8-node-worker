import { Form, Task, TaskFields, TaskQuery, TaskWithVariables, User, Variable } from "./Types";
import { JSONDoc } from "./utils";
/**
 * @description The high-level client for the Tasklist GraphQL API
 * @example
 * ```
 *
 * ```
 */
export declare class TasklistApiClient {
    private userAgentString;
    graphqlUrl: string;
    /**
     * @example
     * ```
     *
     * ```
     * @description
     *
     */
    constructor();
    private getHeaders;
    /**
     * @description Query Tasklist for a list of tasks. See the [API documentation](https://docs.camunda.io/docs/apis-clients/tasklist-api/queries/tasks/).
     * @example
     * ```
     * const tasklist = new TasklistApiClient()
     *
     * async function getTasks() {
     *   const res = await tasklist.getTasks({
     *     state: TaskState.CREATED
     *   }, ['id', 'name', 'processName'])
     *   console.log(res ? 'Nothing' : JSON.stringify(res.tasks, null, 2))
     *   return res
     * }
     * ```
     * @param query
     * @param fields - a list of fields to return in the query results
     *
     */
    getTasks<T = {
        [key: string]: any;
    }>(query: Partial<TaskQuery>, fields?: TaskFields): Promise<{
        tasks: TaskWithVariables<T>[];
    }>;
    getAllTasks<T = {
        [key: string]: any;
    }>(fields?: TaskFields): Promise<{
        tasks: TaskWithVariables<T>[];
    }>;
    /**
     * @description https://docs.camunda.io/docs/apis-clients/tasklist-api/queries/task/
     * @param id
     * @param fields
     * @returns
     */
    getTask<T = {
        [key: string]: any;
    }>(id: string, fields?: TaskFields): Promise<{
        task: TaskWithVariables<T>;
    }>;
    /**
     * @description https://docs.camunda.io/docs/apis-clients/tasklist-api/queries/form/
     * @param id
     * @param processDefinitionId
     */
    getForm(id: string, processDefinitionId: string): Promise<{
        form: Form;
    }>;
    /**
     * @description https://docs.camunda.io/docs/apis-clients/tasklist-api/queries/current-user/
     */
    getCurrentUser(): Promise<User>;
    /**
     * @description https://docs.camunda.io/docs/apis-clients/tasklist-api/queries/variables/
     * @param taskId
     * @param variableNames
     */
    getVariables(taskId: string, variableNames: string[]): Promise<void>;
    /**
     * @description https://docs.camunda.io/docs/apis-clients/tasklist-api/queries/variable/
     * @param id
     */
    getVariable(id: string): Promise<Variable>;
    /**
     * @description https://docs.camunda.io/docs/apis-clients/tasklist-api/mutations/claim-task/
     * @param taskId
     * @param assignee
     * @param allowOverrideAssignment
     */
    claimTask(taskId: string, assignee: string, allowOverrideAssignment?: boolean): Promise<{
        claimTask: Task;
    }>;
    /**
     * @description https://docs.camunda.io/docs/apis-clients/tasklist-api/mutations/complete-task/
     * @param taskId
     * @param variables
     */
    completeTask(taskId: string, variables: JSONDoc): Promise<{
        completeTask: Task;
    }>;
    /**
     * @description Delete process instance data from the Tasklist ES by id. Returns true if the process instance is found and canceled, false if the process instance could not be found.
     * [Documentation](https://docs.camunda.io/docs/apis-clients/tasklist-api/mutations/delete-process-instance/).
     * @param processInstanceId
     */
    deleteProcessInstance(processInstanceId: string): Promise<{
        deleteProcessInstance: boolean;
    }>;
    /**
     * @description https://docs.camunda.io/docs/apis-clients/tasklist-api/mutations/unclaim-task/
     * @param taskId
     */
    unclaimTask(taskId: string): Promise<Task>;
}
