"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getResponseDataOrThrow = exports.decodeTaskVariablesFromGraphQL = exports.encodeTaskVariablesForGraphQL = exports.escape = void 0;
/**
 * Shallow escape
 * @param variable
 * @returns
 */
const escape = (variable) => {
    if (typeof variable === "object") {
        return `${JSON.stringify(variable)}`;
    }
    if (typeof variable === "string") {
        return `"${variable}"`;
    }
    return variable;
};
exports.escape = escape;
const encodeTaskVariablesForGraphQL = (variables) => Object.keys(variables).map(key => ({ name: `${key}`, value: (0, exports.escape)(variables[key]) }));
exports.encodeTaskVariablesForGraphQL = encodeTaskVariablesForGraphQL;
/**
 * @description GraphQL returns variables as an array of {name: string, value: string} object.
 * This function turns this into a plain JS object.
 * @param task
 * @returns
 */
const decodeTaskVariablesFromGraphQL = (task) => {
    // console.log("decodeTaskVariablesFromGraphQL", task)
    return (Object.assign(Object.assign({}, task), { variables: (task.variables || []).reduce((prev, curr) => (Object.assign(Object.assign({}, prev), { [curr.name]: safeJSONparse(curr.value) })), {}) }));
};
exports.decodeTaskVariablesFromGraphQL = decodeTaskVariablesFromGraphQL;
const safeJSONparse = (obj) => {
    try {
        return JSON.parse(obj);
    }
    catch (_a) {
        console.log('Error parsing JSON');
        return obj;
    }
};
/**
 * @description Helper method to throw if the GraphQL endpoint returns an error, or destructure the
 * response data if the GraphQL returned data.
 * @param res
 * @throws
 */
const getResponseDataOrThrow = (res) => {
    const isError = (res) => !!res.errors;
    if (isError(res)) {
        throw new Error(JSON.stringify(res.errors, null, 2));
    }
    return res.data;
};
exports.getResponseDataOrThrow = getResponseDataOrThrow;
