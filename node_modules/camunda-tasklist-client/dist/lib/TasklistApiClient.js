"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TasklistApiClient = void 0;
const camunda_saas_oauth_1 = require("camunda-saas-oauth");
const camunda_8_credentials_from_env_1 = require("camunda-8-credentials-from-env");
const gotql_1 = __importDefault(require("gotql"));
const utils_1 = require("./utils");
const pkg = require('../../package.json');
const defaultFields = [
    'assignee',
    'candidateGroups',
    'completionTime',
    'creationTime',
    'formKey',
    'id',
    'isFirst',
    'name',
    'processDefinitionId',
    'processInstanceId',
    'processName',
    'sortValues',
    'taskDefinitionId',
    'taskState',
    { variables: { fields: ['name', 'value'] } }
];
/**
 * @description The high-level client for the Tasklist GraphQL API
 * @example
 * ```
 *
 * ```
 */
class TasklistApiClient {
    /**
     * @example
     * ```
     *
     * ```
     * @description
     *
     */
    constructor() {
        this.userAgentString = `tasklist-graphql-client-nodejs/${pkg.version}`;
        const creds = (0, camunda_8_credentials_from_env_1.getTasklistCredentials)();
        this.graphqlUrl = `${creds.CAMUNDA_TASKLIST_BASE_URL}/graphql`;
    }
    getHeaders() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                'content-type': 'application/json',
                'authorization': `Bearer ${yield (0, camunda_saas_oauth_1.getTasklistToken)(this.userAgentString)}`,
                'user-agent': this.userAgentString,
                'accept': '*/*'
            };
        });
    }
    /**
     * @description Query Tasklist for a list of tasks. See the [API documentation](https://docs.camunda.io/docs/apis-clients/tasklist-api/queries/tasks/).
     * @example
     * ```
     * const tasklist = new TasklistApiClient()
     *
     * async function getTasks() {
     *   const res = await tasklist.getTasks({
     *     state: TaskState.CREATED
     *   }, ['id', 'name', 'processName'])
     *   console.log(res ? 'Nothing' : JSON.stringify(res.tasks, null, 2))
     *   return res
     * }
     * ```
     * @param query
     * @param fields - a list of fields to return in the query results
     *
     */
    getTasks(query, fields = defaultFields) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            const q = {
                operation: {
                    name: 'tasks',
                    args: {
                        query
                    },
                    fields
                }
            };
            return gotql_1.default.query(this.graphqlUrl, q, { headers }).then(res => ({ tasks: (0, utils_1.getResponseDataOrThrow)(res).tasks.map((utils_1.decodeTaskVariablesFromGraphQL)) }));
        });
    }
    getAllTasks(fields = defaultFields) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getTasks({}, fields);
        });
    }
    /**
     * @description https://docs.camunda.io/docs/apis-clients/tasklist-api/queries/task/
     * @param id
     * @param fields
     * @returns
     */
    getTask(id, fields = defaultFields) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            const query = {
                operation: {
                    name: 'task',
                    args: {
                        id
                    },
                    fields
                }
            };
            return gotql_1.default.query(this.graphqlUrl, query, { headers }).then(res => ({ task: (0, utils_1.decodeTaskVariablesFromGraphQL)((0, utils_1.getResponseDataOrThrow)(res).task) }));
        });
    }
    /**
     * @description https://docs.camunda.io/docs/apis-clients/tasklist-api/queries/form/
     * @param id
     * @param processDefinitionId
     */
    getForm(id, processDefinitionId) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            const query = {
                operation: {
                    name: 'form',
                    args: {
                        id,
                        processDefinitionId
                    },
                    fields: ['id', 'processDefinitionId', 'schema']
                }
            };
            return gotql_1.default.query(this.graphqlUrl, query, { headers }).then(res => (0, utils_1.getResponseDataOrThrow)(res));
        });
    }
    /**
     * @description https://docs.camunda.io/docs/apis-clients/tasklist-api/queries/current-user/
     */
    getCurrentUser() {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            const query = {
                operation: {
                    name: 'user',
                    fields: [
                        'userId',
                        'displayName',
                        'permissions',
                        'roles',
                        'salesPlanType'
                    ]
                }
            };
            return gotql_1.default.query(this.graphqlUrl, query, { headers }).then(res => (0, utils_1.getResponseDataOrThrow)(res));
        });
    }
    /**
     * @description https://docs.camunda.io/docs/apis-clients/tasklist-api/queries/variables/
     * @param taskId
     * @param variableNames
     */
    getVariables(taskId, variableNames) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("Not implemented yet");
        });
    }
    /**
     * @description https://docs.camunda.io/docs/apis-clients/tasklist-api/queries/variable/
     * @param id
     */
    getVariable(id) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("Not implemented yet");
        });
    }
    /**
     * @description https://docs.camunda.io/docs/apis-clients/tasklist-api/mutations/claim-task/
     * @param taskId
     * @param assignee
     * @param allowOverrideAssignment
     */
    claimTask(taskId, assignee, allowOverrideAssignment = true) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            const query = {
                operation: {
                    name: 'claimTask',
                    args: {
                        taskId,
                        assignee,
                        allowOverrideAssignment: false
                    },
                    fields: defaultFields
                }
            };
            return gotql_1.default.mutation(this.graphqlUrl, query, // the typing seems to have an error
            { headers }).then(res => (0, utils_1.getResponseDataOrThrow)(res));
        });
    }
    /**
     * @description https://docs.camunda.io/docs/apis-clients/tasklist-api/mutations/complete-task/
     * @param taskId
     * @param variables
     */
    completeTask(taskId, variables) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            const query = {
                operation: {
                    name: 'completeTask',
                    args: {
                        taskId,
                        variables: '$completionVariables'
                    },
                    fields: defaultFields
                },
                variables: {
                    completionVariables: {
                        type: '[VariableInput!]!',
                        value: (0, utils_1.encodeTaskVariablesForGraphQL)(variables)
                    }
                }
            };
            return gotql_1.default.mutation(this.graphqlUrl, query, { headers }).then(res => (0, utils_1.getResponseDataOrThrow)(res));
        });
    }
    /**
     * @description Delete process instance data from the Tasklist ES by id. Returns true if the process instance is found and canceled, false if the process instance could not be found.
     * [Documentation](https://docs.camunda.io/docs/apis-clients/tasklist-api/mutations/delete-process-instance/).
     * @param processInstanceId
     */
    deleteProcessInstance(processInstanceId) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            const query = {
                operation: {
                    name: 'deleteProcessInstance',
                    args: {
                        processInstanceId,
                    },
                    fields: []
                }
            };
            return gotql_1.default.mutation(this.graphqlUrl, query, { headers }).then(res => (0, utils_1.getResponseDataOrThrow)(res));
        });
    }
    /**
     * @description https://docs.camunda.io/docs/apis-clients/tasklist-api/mutations/unclaim-task/
     * @param taskId
     */
    unclaimTask(taskId) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            const query = {
                operation: {
                    name: 'unclaimTask',
                    args: {
                        taskId,
                    },
                    fields: defaultFields
                }
            };
            return gotql_1.default.mutation(this.graphqlUrl, query, { headers }).then(res => (0, utils_1.getResponseDataOrThrow)(res));
        });
    }
}
exports.TasklistApiClient = TasklistApiClient;
