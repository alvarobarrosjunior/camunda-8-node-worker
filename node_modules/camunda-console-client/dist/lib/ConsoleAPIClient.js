"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsoleApiClient = void 0;
const camunda_saas_oauth_1 = require("camunda-saas-oauth");
const camunda_8_credentials_from_env_1 = require("camunda-8-credentials-from-env");
const got_1 = __importDefault(require("got"));
const pkg = require('../../package.json');
const debug = require('debug')('consoleapi');
class ConsoleApiClient {
    constructor(userAgent) {
        const customAgent = userAgent ? ` ${userAgent}` : ``;
        this.userAgentString = `console-client-nodejs/${pkg.version}${customAgent}`;
        const creds = (0, camunda_8_credentials_from_env_1.getConsoleCredentials)();
        this.gotOptions = {
            prefixUrl: `${creds.CAMUNDA_CONSOLE_BASE_URL}/clusters`
        };
        debug('prefixUrl', `${creds.CAMUNDA_CONSOLE_BASE_URL}/clusters`);
    }
    getHeaders() {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = {
                'content-type': 'application/json',
                'authorization': `Bearer ${yield (0, camunda_saas_oauth_1.getConsoleToken)(this.userAgentString)}`,
                'user-agent': this.userAgentString,
                'accept': '*/*'
            };
            return headers;
        });
    }
    /**
     *
     * @description Get an array of the current API clients for this cluster. See [the API Documentation](https://console.cloud.camunda.io/customer-api/openapi/docs/#/default/GetClients) for more details.
     * @param clusterUuid - The cluster UUID
     *
     */
    getClients(clusterUuid) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            return (0, got_1.default)(`${clusterUuid}/clients`, Object.assign({ headers }, this.gotOptions)).json();
        });
    }
    /**
     * @description Create a new API client for a cluster. See [the API Documentation](https://console.cloud.camunda.io/customer-api/openapi/docs/#/default/CreateClient) for more details.
     * @returns
     */
    createClient(req) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            return got_1.default.post(`${req.clusterUuid}/clients`, Object.assign({ body: JSON.stringify({
                    clientName: req.clientName,
                    permissions: req.permissions
                }), headers }, this.gotOptions)).json();
        });
    }
    /**
     * @description Get the details of an API client. See [the API Documentation](https://console.cloud.camunda.io/customer-api/openapi/docs/#/default/GetClient) for more details.
     * @param clusterUuid
     * @param clientId
     * @returns
     */
    getClient(clusterUuid, clientId) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            return (0, got_1.default)(`${clusterUuid}/clients/${clientId}`, Object.assign({ headers }, this.gotOptions)).json();
        });
    }
    /**
     * @description See [the API Documentation](https://console.cloud.camunda.io/customer-api/openapi/docs/#/default/DeleteClient) for more details.
     * @param clusterUuid
     * @param clientId
     */
    deleteClient(clusterUuid, clientId) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            return got_1.default.delete(`${clusterUuid}/clients/${clientId}`, Object.assign({ headers }, this.gotOptions)).json();
        });
    }
    /**
     *
     * @description Return an array of clusters. See [the API Documentation](https://console.cloud.camunda.io/customer-api/openapi/docs/#/default/GetClusters) for more details.
     */
    getClusters() {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            return (0, got_1.default)('', Object.assign({ headers }, this.gotOptions)).json();
        });
    }
    /**
     *
     * @description Create a new cluster. See [the API Documentation](https://console.cloud.camunda.io/customer-api/openapi/docs/#/default/CreateCluster) for more details.
     */
    createCluster(createClusterRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            const req = Object.assign({ body: JSON.stringify(createClusterRequest), headers }, this.gotOptions);
            debug(req);
            return got_1.default.post('', req).json();
        });
    }
    /**
     *
     * @description Retrieve the metadata for a cluster. See [the API Documentation](https://console.cloud.camunda.io/customer-api/openapi/docs/#/default/GetCluster) for more details.
     *
     */
    getCluster(clusterUuid) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            return (0, got_1.default)(`${clusterUuid}`, Object.assign({ headers }, this.gotOptions)).json();
        });
    }
    /**
     *
     * @description Delete a cluster. See [the API Documentation](https://console.cloud.camunda.io/customer-api/openapi/docs/#/default/DeleteCluster) for more details.
     *
     */
    deleteCluster(clusterUuid) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            return got_1.default.delete(`${clusterUuid}`, Object.assign({ headers }, this.gotOptions)).json();
        });
    }
    /**
     *
     * @description Retrieve the available parameters for cluster creation. See [the API Documentation](https://console.cloud.camunda.io/customer-api/openapi/docs/#/default/GetParameters) for more details.
     */
    getParameters() {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            return (0, got_1.default)(`parameters`, Object.assign({ headers }, this.gotOptions)).json();
        });
    }
    /**
     *
     * @description Retrieve the connector secrets. See [the API Documentation](https://console.cloud.camunda.io/customer-api/openapi/docs/#/default/GetSecrets) for more details.
     */
    getSecrets(clusterUuid) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            return (0, got_1.default)(`${clusterUuid}/secrets`, Object.assign({ headers }, this.gotOptions)).json();
        });
    }
    /**
     *
     * @description Create a new connector secret. See [the API Documentation](https://console.cloud.camunda.io/customer-api/openapi/docs/#/default/CreateSecret) for more details.
     */
    createSecret({ clusterUuid, secretName, secretValue }) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            const req = Object.assign({ body: JSON.stringify({ secretName, secretValue }), headers }, this.gotOptions);
            return got_1.default.post(`${clusterUuid}/secrets`, req).json();
        });
    }
    /**
     *
     * @description Delete a connector secret. See [the API Documentation](https://console.cloud.camunda.io/customer-api/openapi/docs/#/default/DeleteSecret) for more details.
     */
    deleteSecret(clusterUuid, secretName) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            return got_1.default.delete(`${clusterUuid}/secrets/${secretName}`, Object.assign({ headers }, this.gotOptions)).json();
        });
    }
    /**
     *
     * @description Add one or more IPs to the whitelist for the cluster. See [the API Documentation](https://console.cloud.camunda.io/customer-api/openapi/docs/#/default/UpdateIpWhitelist) for more details.
     * @param ipwhitelist
     * @returns
     */
    whitelistIPs(clusterUuid, ipwhitelist) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            return got_1.default.put(`${clusterUuid}/ipwhitelist`, Object.assign({ body: JSON.stringify({
                    ipwhitelist
                }), headers }, this.gotOptions)).json();
        });
    }
}
exports.ConsoleApiClient = ConsoleApiClient;
