"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OperateApiClient = void 0;
const camunda_saas_oauth_1 = require("camunda-saas-oauth");
const camunda_8_credentials_from_env_1 = require("camunda-8-credentials-from-env");
const got_1 = __importDefault(require("got"));
const pkg = require('../../package.json');
const OPERATE_API_VERSION = 'v1';
/**
 * @description The high-level client for Operate.
 * @example
 * ```
 * const operate = new OperateApiClient()
 *
 * operate.searchProcessInstances({
 *     filter: {
 *         state: "ACTIVE"
 *     },
 *     size: 50
 * }).then(instances => {
 *     console.log(instances)
 * })
 * ```
 */
class OperateApiClient {
    /**
     * @example
     * ```
     * const operate = new OperateApiClient()
     * ```
     */
    constructor(options = {}) {
        var _a;
        this.oauthProvider = options.oauthProvider;
        this.userAgentString = `operate-client-nodejs/${pkg.version}`;
        const baseUrl = (_a = options.baseUrl) !== null && _a !== void 0 ? _a : (0, camunda_8_credentials_from_env_1.getOperateCredentials)().CAMUNDA_OPERATE_BASE_URL;
        this.gotOptions = {
            prefixUrl: `${baseUrl}/${OPERATE_API_VERSION}`
        };
    }
    getHeaders() {
        return __awaiter(this, void 0, void 0, function* () {
            const token = (this.oauthProvider) ?
                yield this.oauthProvider.getToken('OPERATE') :
                yield (0, camunda_saas_oauth_1.getOperateToken)(this.userAgentString);
            return {
                'content-type': 'application/json',
                'authorization': `Bearer ${token}`,
                'user-agent': this.userAgentString,
                'accept': '*/*'
            };
        });
    }
    /**
     * @description Search and retrieve process definitions.
     *
     * [Camunda 8 Documentation](https://docs.camunda.io/docs/apis-clients/operate-api/#process-definition)
     * @example
     * ```
     * const query: Query<ProcessDefinition> = {
     *   filter: {},
     *   size: 50,
     *   sort: [
     *     {
     *       field: "bpmnProcessId",
     *       order: "ASC",
     *     },
     *    ],
     *  };
     * const operate = newOperateClient()
     * const defs = await operate.searchProcessDefinitions(query);
     * ```
     */
    searchProcessDefinitions(query = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            return got_1.default.post(`process-definitions/search`, Object.assign({ json: query, headers }, this.gotOptions)).json();
        });
    }
    /**
     *
     * @description Retrieve the metadata for a specific process definition, by key.
     *
     * [Camunda 8 Documentation](https://docs.camunda.io/docs/apis-clients/operate-api/#process-definition)
     * @example
     * ```
     * const operate = new OperateApiClient()
     * const definition = await operate.getProcessDefinition(2251799817140074);
     *  ```
     */
    getProcessDefinition(processDefinitionKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            return (0, got_1.default)(`process-definitions/${processDefinitionKey}`, Object.assign({ headers }, this.gotOptions)).json();
        });
    }
    getProcessDefinitionXML(processDefinitionKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            return (0, got_1.default)(`process-definitions/${processDefinitionKey}/xml`, Object.assign({ headers }, this.gotOptions)).text();
        });
    }
    /**
     * @description Search and retrieve process instances.
     * @example
     * ```
     * const operate = new OperateApiClient()
     * const query: Query<ProcessInstance>  = {
     *   filter: {
     *     processVersion: 1
     *   },
     *   size: 50,
     *   sort: [
     *     {
     *       field: "bpmProcessId",
     *       order: "ASC"
     *     }
     *   ]
     * }
     * const instances = await operate.searchProcessInstances(query)
     * console.log(`Found ${instances.total} instances`)
     */
    searchProcessInstances(query = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            return got_1.default.post(`process-instances/search`, Object.assign({ json: query, headers }, this.gotOptions)).json();
        });
    }
    /**
     *
     * @description Retrieve a specific process instance by id.
     * @example
     * ```
     * const operate = new OperateApiClient()
     * const instance = await operate.getProcessInstance(2251799819847322)
     * ```
     */
    getProcessInstance(processInstanceKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            return (0, got_1.default)(`process-instances/${processInstanceKey}`, Object.assign({ headers }, this.gotOptions)).json();
        });
    }
    /**
     * @description Delete a specific process instance by key.
     * @example
     * ```
     * const operate = new OperateApiClient()
     * await operate.deleteProcessInstance(2251799819847322)
     * ```
     */
    deleteProcessInstance(processInstanceKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            return got_1.default.delete(`process-instances/${processInstanceKey}`, Object.assign({ headers }, this.gotOptions)).json();
        });
    }
    /**
     * @description Get the statistics for a process instance, grouped by flow nodes
     */
    getProcessInstanceStatistics(processInstanceKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            return (0, got_1.default)(`process-instances/${processInstanceKey}/statistics`, Object.assign({ headers }, this.gotOptions)).json();
        });
    }
    /**
     * @description Get sequence flows of process instance by key
     */
    getProcessInstanceSequenceFlows(processInstanceKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            return (0, got_1.default)(`process-instances/${processInstanceKey}/sequence-flows`, Object.assign({ headers }, this.gotOptions)).json();
        });
    }
    /**
     *
     * @description Search and retrieve incidents.
     * @example
     * ```
     * const operate = new OperateApiClient()
     * const query: Query<Incident> = {
     *   filter: {
     *     state: "ACTIVE"
     *   },
     *   size: 50,
     *   sort: [
     *     {
     *       field: "creationTime",
     *       order: "ASC"
     *     }
     *   ]
     * }
     * const incidents = operate.searchIncidents(query)
     * ```
     */
    searchIncidents(query = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            return got_1.default.post(`incidents/search`, Object.assign({ json: query, headers }, this.gotOptions)).json();
        });
    }
    /**
     *
     * @description Retrieve an incident by incident key.
     * @example
     * ```
     * const operate = new OperateApiClient()
     * const incident = await operate.getIncident(2251799818436725)
     * console.log(incident.message)
     * ```
     */
    getIncident(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            return (0, got_1.default)(`incidents/${key}`, Object.assign({ headers }, this.gotOptions)).json();
        });
    }
    searchFlownodeInstances(query) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            return got_1.default.post(`flownodes/search`, Object.assign(Object.assign({ headers }, this.gotOptions), { json: query })).json();
        });
    }
    getFlownodeInstance(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            return (0, got_1.default)(`flownodes/${key}`, Object.assign({ headers }, this.gotOptions)).json();
        });
    }
    searchVariables(query) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            return got_1.default.post(`variables/search`, Object.assign({ headers, json: query }, this.gotOptions)).json();
        });
    }
    /**
     * @description Retrieve the variables for a Process Instance, given its key
     * @param processInstanceKey
     * @returns
     */
    getVariablesforProcess(processInstanceKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            const body = {
                filter: {
                    processInstanceKey
                }
            };
            return got_1.default.post(`variables/search`, Object.assign({ headers, body: JSON.stringify(body) }, this.gotOptions)).json();
        });
    }
    /**
     * @description Retrieve the variables for a Process Instance as an object, given its key
     * @param processInstanceKey
     * @returns
     */
    getJSONVariablesforProcess(processInstanceKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            const body = {
                filter: {
                    processInstanceKey
                },
                size: 1000
            };
            const vars = yield got_1.default.post(`variables/search`, Object.assign({ headers, body: JSON.stringify(body) }, this.gotOptions)).json();
            return vars.items.reduce((prev, curr) => (Object.assign(Object.assign({}, prev), { [curr.name]: this.safeJSONparse(curr.value) })), {});
        });
    }
    safeJSONparse(thing) {
        try {
            return JSON.parse(thing);
        }
        catch (e) {
            console.log(e);
            console.log(thing);
            return thing;
        }
    }
    /**
     *
     * @description Return a variable identified by its variable key
     * @returns
     */
    getVariables(variableKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.getHeaders();
            return (0, got_1.default)(`variables/${variableKey}`, Object.assign({ headers }, this.gotOptions)).json();
        });
    }
}
exports.OperateApiClient = OperateApiClient;
