"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOptimizeCredentials = exports.getOperateCredentials = exports.getTasklistCredentials = exports.getZeebeCredentials = exports.getConsoleCredentials = exports.getCamundaCredentialsFromEnv = void 0;
const neon_env_1 = require("neon-env");
const console_1 = require("./lib/console");
const operate_1 = require("./lib/operate");
const optimize_1 = require("./lib/optimize");
const tasklist_1 = require("./lib/tasklist");
const zeebe_1 = require("./lib/zeebe");
let credentialsCache;
let optimizeCache;
let operateCache;
let tasklistCache;
let zeebeCache;
let consoleCache;
function getCamundaCredentialsFromEnv(cache = true) {
    if (!cache) {
        return _getEnv();
    }
    if (credentialsCache === undefined) {
        credentialsCache = _getEnv();
    }
    return credentialsCache;
}
exports.getCamundaCredentialsFromEnv = getCamundaCredentialsFromEnv;
function getConsoleCredentials() {
    if (consoleCache === undefined) {
        consoleCache = (0, console_1._getConsoleEnv)();
    }
    return consoleCache;
}
exports.getConsoleCredentials = getConsoleCredentials;
function getZeebeCredentials() {
    var _a;
    if (zeebeCache === undefined) {
        zeebeCache = (0, zeebe_1._getZeebeEnv)();
    }
    if (!((_a = zeebeCache.CAMUNDA_CREDENTIALS_SCOPES) === null || _a === void 0 ? void 0 : _a.includes('Zeebe'))) {
        throw new Error(`Credentials do not have required scope 'Zeebe'. Credential scopes: '${zeebeCache.CAMUNDA_CREDENTIALS_SCOPES}'`);
    }
    return zeebeCache;
}
exports.getZeebeCredentials = getZeebeCredentials;
function getTasklistCredentials() {
    var _a;
    if (tasklistCache === undefined) {
        tasklistCache = (0, tasklist_1._getTasklistEnv)();
    }
    if (!((_a = tasklistCache.CAMUNDA_CREDENTIALS_SCOPES) === null || _a === void 0 ? void 0 : _a.includes('Tasklist'))) {
        throw new Error(`Credentials do not have required scope 'Tasklist'. Credential scopes: '${tasklistCache.CAMUNDA_CREDENTIALS_SCOPES}'`);
    }
    return tasklistCache;
}
exports.getTasklistCredentials = getTasklistCredentials;
function getOperateCredentials() {
    var _a;
    if (operateCache === undefined) {
        operateCache = (0, operate_1._getOperateEnv)();
    }
    if (!((_a = operateCache.CAMUNDA_CREDENTIALS_SCOPES) === null || _a === void 0 ? void 0 : _a.includes('Operate'))) {
        throw new Error(`Credentials do not have required scope 'Operate'. Credential scopes: '${operateCache.CAMUNDA_CREDENTIALS_SCOPES}'`);
    }
    return operateCache;
}
exports.getOperateCredentials = getOperateCredentials;
function getOptimizeCredentials() {
    var _a;
    if (optimizeCache === undefined) {
        optimizeCache = (0, optimize_1._getOptimizeEnv)();
    }
    if (!((_a = optimizeCache.CAMUNDA_CREDENTIALS_SCOPES) === null || _a === void 0 ? void 0 : _a.includes('Optimize'))) {
        throw new Error(`Credentials do not have required scope 'Optimize'. Credential scopes: '${optimizeCache.CAMUNDA_CREDENTIALS_SCOPES}'`);
    }
    return optimizeCache;
}
exports.getOptimizeCredentials = getOptimizeCredentials;
function _getEnv() {
    var _a, _b, _c, _d;
    const creds = (0, neon_env_1.createEnv)({
        ZEEBE_ADDRESS: {
            type: 'string',
            optional: false
        },
        ZEEBE_CLIENT_ID: {
            type: 'string',
            optional: false
        },
        ZEEBE_CLIENT_SECRET: {
            type: 'string',
            optional: false
        },
        ZEEBE_AUTHORIZATION_SERVER_URL: {
            type: 'string',
            optional: false
        },
        ZEEBE_TOKEN_AUDIENCE: {
            type: 'string',
            optional: true
        },
        CAMUNDA_CLUSTER_ID: {
            type: 'string',
            optional: false
        },
        CAMUNDA_CLUSTER_REGION: {
            type: 'string',
            optional: false
        },
        CAMUNDA_CREDENTIALS_SCOPES: {
            type: 'string',
            optional: false
        },
        CAMUNDA_TASKLIST_BASE_URL: {
            type: 'string',
            optional: true
        },
        CAMUNDA_OPTIMIZE_BASE_URL: {
            type: 'string',
            optional: true
        },
        CAMUNDA_OPERATE_BASE_URL: {
            type: 'string',
            optional: true
        },
        CAMUNDA_OAUTH_URL: {
            type: 'string',
            optional: false
        }
    });
    const scopes = {
        Zeebe: (_a = creds.CAMUNDA_CREDENTIALS_SCOPES) === null || _a === void 0 ? void 0 : _a.includes('Zeebe'),
        Tasklist: (_b = creds.CAMUNDA_CREDENTIALS_SCOPES) === null || _b === void 0 ? void 0 : _b.includes('Tasklist'),
        Operate: (_c = creds.CAMUNDA_CREDENTIALS_SCOPES) === null || _c === void 0 ? void 0 : _c.includes('Operate'),
        Optimize: (_d = creds.CAMUNDA_CREDENTIALS_SCOPES) === null || _d === void 0 ? void 0 : _d.includes('Optimize')
    };
    return Object.assign(Object.assign({}, creds), { ZEEBE_ADDRESS: creds.ZEEBE_ADDRESS, ZEEBE_CLIENT_ID: creds.ZEEBE_CLIENT_ID, ZEEBE_CLIENT_SECRET: creds.ZEEBE_CLIENT_SECRET, ZEEBE_AUTHORIZATION_SERVER_URL: creds.ZEEBE_AUTHORIZATION_SERVER_URL, scopes, complete: true });
}
